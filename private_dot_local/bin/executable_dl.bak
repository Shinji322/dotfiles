#!/bin/bash -x
# handles downloading any link thrown to it
# either uses ripgrep or python
ytdl='tsp yt-dlp -4vcx -N 5 --embed-metadata --sponsorblock-mark all'
rootdir="$HOME/arc/dl"
repos="$HOME/.local/repos"

usage() {
  echo "This is a simple script that handles downloading any link thrown at it.
It will use the appropriate downloader if it is installed and query you if it isn't present.
"
}

menu() {
  # -t 0 means running from terminal
  if [ -t 0 && command -v fzf ]; then 
    menu="fzf"
  elif [ command -v bmenu ]; then 
    menu="bemenu"
  elif [ command -v dmenu ]; then 
    menu="dmenu"
  elif [ command -v rofi ]; then
    menu="rofi -show drun"
  fi
  $menu $@
}

err() {
  for msg in $@; do
    echo "\033[0;31m$msg\033[0m"
  done
  exit 1
}

ggrep() {
  # Usage:
  #   $1 = group
  #   $2 = pattern
  #   $3 = string
  if [ command -v rg ]; then 
    # e.g. echo "foobar" | rg -o -r '$1' "foo(bar)"
    #   bar
    rg -o -r "\$$1" "$2"  "$3"
  elif [ command -v python ]; then
    python <<< "import re; print(re.search('$2', '$3').group($1))"
  else
    err "Couldn't find suitable regex parser" "This script depends on using regex groups which isn't available in gnu grep" "Please install ripgrep or python"
  fi
}

#                    _         _          
#  _   _  ___  _   _| |_ _   _| |__   ___ 
# | | | |/ _ \| | | | __| | | | '_ \ / _ \
# | |_| | (_) | |_| | |_| |_| | |_) |  __/
#  \__, |\___/ \__,_|\__|\__,_|_.__/ \___|
#  |___/                                  
ytm() {
  # download unique music
  link="https://youtube.com/$(basename $1)"
  $ytdl --check-formats --format "(bestaudio[acodec^=opus]/bestaudio)/best" "$link"
}
ytv() {
  # download unique video
  link="https://youtube.com/$(basename $1)"
  # recommended by FrenchGhosty
  $ytdl --write-info-json --check-formats --merge-output-format "mkv" "$link" 
}
ytca() {
  # archive an entire channel
  link="https://youtube.com/$(basename $1)"
  $ytdl --write-info-json --check-formats --merge-output-format "mkv" --output "%(uploader)s/%(uploader)s - %(upload_date)s - %(title)s/%(uploader)s - %(upload_date)s - %(title)s [%(id)s].%(ext)s" "$link" 
}
ytva() {
  # archives a video
  link="https://youtube.com/$(basename $1)"
  $ytdl --write-info-json --check-formats --merge-output-format "mkv" --get-comments --output "%(title)s - %(uploader)s - %(upload_date)s/%(title)s - %(uploader)s - %(upload_date)s [%(id)s].%(ext)s" "$link"
}
ythandle() {
  if [ -n "$audio" ]; then
    ytm "$1"
  elif [ -n "$video" ]; then  
    ytv "$1"
  else
    option="$(printf '%s\n%s\n%s\n%s\n' 'Channel' 'Music' 'Video' 'Video (archive)' | fzf)"
    case "$option" in
      'Channel') ytca "$1" ;;
      'Music') ytm "$1" ;;
      'Video') ytv "$1" ;;
      'Video (archive)') ytva "$1" ;;
      *) exit 1 ;;
    esac
  fi
}
boardhandle() {
  rg -r 'https://a.4cdn.org/$1/catalog.json'
}
threadhandle() {
  rg -r 'https://a.4cdn.org/$1/thread/$2.json' '.*?4chan.*?/(.*)/thread/(.*)' <<< "$link"
  gallery-dl "$link"
  # get the most recently created directory by date (might be to refactor by updating gallery-dl's config)
  dir=`find "$rootdir/4chan" -type d -not -path "$rootdir/4chan" -printf "%T@ %Tc %p\n" | sort -nr | awk '{ print $NF }'`
  boardthread=`rg -or '$1|$2' '.*?\./4chan/(.*?)/(\d+).*?' <<< "$dir"`
  board='${boardthread%%|*}'
  thread='${boardthread##*|}'
}


main() {
  while test $# -gt 0; do
    case "$1" in
      -l|--link)
        grep -Eq '.*(youtube.com|yewtu.be|invidious.*|vid.puffyan.us)/(.*)' <<< "$2" && { youtube=true; icon="" }
        grep -Eq '.*(nitter.*|twitter.*)/(.*)' <<< "$2" && icon=''
        grep -Eq '.*(imgur.*|rimgo.*)/(.*)' <<< "$2" && icon=''
        grep -Eq '.*(github.*|gitlab.*|gittea.*)/(.*)' <<< "$2" && icon=''
        grep -Eq '.*(4chan.*)/(.*)' <<< "$2" && { chan=true; icon='󰠖' }
        link="$2"
        shift 2
        ;;
      -a|--audio)
        audio=true
        shift 1
        ;;
      -v|--video)
        video=true
        shift 1
        ;;
      *)
        usage; exit 1
        ;;
    esac
  done

  if [ -n "$youtube" ]; then 
    ythandle "$link"
  elif [ -n "$chan" ]; then
    chandle "$link"
  else
    tsp gallery-dl "$link"
  fi
  tsp -d notify-send "$icon Finished downloading $link"
  tsp -d tsp -C
} 


main $@ >~/.cache/dl.log
